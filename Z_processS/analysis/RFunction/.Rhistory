print(ggf)
}
}
PlotReindeer(fitsReindeer_RFf_RDt)
#PlotReindeer(fitsReindeer_RFt_RDt)
quantile(dataReindeer$FullDeltaPow[[1]])
quantile(dataReindeer$FullDeltaPow[[1]],na.rm=T)
quantile(dataReindeer$FullDeltaPow[[2]],na.rm=T)
plot(dataReindeer$FullDeltaPow[[2]])
quantile(dataReindeer$FullDeltaPow[[2]]$SWA,na.rm=T)
quantile(dataReindeer$FullDeltaPow[[2]]$SWA,na.rm=T,prob=seq(0.95,1,by=.01))
quantile(dataReindeer$FullDeltaPow[[1]]$SWA,na.rm=T,prob=seq(0.95,1,by=.01))
quantile(dataReindeer$FullDeltaPow[[3]]$SWA,na.rm=T,prob=seq(0.95,1,by=.01))
sapply(seq(1,11),function(x){})
sapply(seq(1,11),function(x){quantile(dataReindeer$FullDeltaPow[[x]]$SWA,na.rm=T,prob=0.99)})
sapply(seq(1,11),function(x){quantile(dataReindeer$FullDeltaPow[[x]]$SWA,na.rm=T,prob=0.999)})
mean(sapply(seq(1,11),function(x){quantile(dataReindeer$FullDeltaPow[[x]]$SWA,na.rm=T,prob=0.999)}))
mean(sapply(seq(1,11),function(x){quantile(dataReindeer$FullDeltaPow[[x]]$SWA,na.rm=T,prob=0.9999)}))
mean(sapply(seq(1,11),function(x){quantile(dataReindeer$FullDeltaPow[[x]]$SWA,na.rm=T,prob=0.99999)}))
mean(sapply(seq(1,11),function(x){quantile(dataReindeer$FullDeltaPow[[x]]$SWA,na.rm=T,prob=0.99)}))
mean(sapply(seq(1,11),function(x){quantile(dataReindeer$FullDeltaPow[[x]]$SWA,na.rm=T,prob=0.999)}))
library(Rcpp)
library(optimx)
library(reshape2)
library(ggplot2)
library(patchwork)
sourceCpp("RFunction/Process_S_And_SWAdynamics.cpp") # Function to simulate process-S and SWA
load("../data/dataReindeer_processed.Rdata") # see ProcessData.Rmd
source("RFunction/ModelReinderSWA.R")
mean(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA[dataReindeer$FullDeltaPow[[x]]$Time>60])[1:300],na.rm=T,prob=1)}))
# Top value for start
mean(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA)[1:300],prob=0.9)}))
sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA),na.rm=T,prob=0.99)})
sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA),na.rm=T,prob=1)})
sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA),na.rm=T,prob=0.999)})
mean(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA),na.rm=T,prob=0.999)}))
mean(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA),na.rm=T,prob=0.99)}))
sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA),na.rm=T,prob=0.99)})
sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA),na.rm=T,prob=0.999)})
mean(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA),na.rm=T,prob=0.999)}))
sd(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA),na.rm=T,prob=0.999)}))
sd(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA),na.rm=T,prob=0.99)}))
sd(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA),na.rm=T,prob=0.995)}))
mean(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA),na.rm=T,prob=0.995)}))
mean(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA),na.rm=T,prob=0.9975)}))
sd(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA),na.rm=T,prob=0.9975)}))
sd(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA[dataReindeer$FullDeltaPow[[x]]$Time>60])[1:300],na.rm=T,prob=1)}))
mean(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA[dataReindeer$FullDeltaPow[[x]]$Time>60])[1:300],na.rm=T,prob=1)}))
sd(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA[dataReindeer$FullDeltaPow[[x]]$Time>60])[1:300],na.rm=T,prob=1)}))
x<-read.table("F:/Projects/BackUP_oldDir/SleepWake_Model/Data/C57BL6J_Cortex_TimeCourse_CHN2019/CHNPNAS_fits.txt",header=T)
head(x)
x<-read.table("F:/Projects/BackUP_oldDir/SleepWake_Model/Data/C57BL6J_Cortex_TimeCourse_CHN2019/params_sleep.txt",header=T)
x<-read.table("F:/Projects/BackUP_oldDir/SleepWake_Model/Data/C57BL6J_Cortex_TimeCourse_CHN2019/params_sleep.txt",header=T,fill=T)
x<-read.table("F:/Projects/BackUP_oldDir/SleepWake_Model/Data/C57BL6J_Cortex_TimeCourse_CHN2019/params_sleep.txt",header=T,fill=T,sep="\t")
head(x)
plot(x$init,x$U)
plot(x$init-x$U)
head(x[x$init>x$U,])
nrow(x[x$init>x$U,])
nrow(x[x$init<x$U,])
nrow(x[x$init>x$U,])
nrow(x[x$init>x$L,])
nrow(x[x$init<x$L,])
(x[x$init<x$L,])
(x[x$init<x$L & x$L < x$U,])
(x[x$init>x$U & x$L < x$U,])
hist(x$tau.w)
hist(x$tau.w[x$U>x$L])
hist(c(x$tau.w[x$U>x$L],x$tau.s[x$U<x$L]))
hist(log10(c(x$tau.w[x$U>x$L],x$tau.s[x$U<x$L])))
hist(log10(c(x$tau.s[x$U>x$L],x$tau.w[x$U<x$L])))
hist(tau-s)
hist(x$tau.s)
hist(x$tau.w)
nrow(x)
mean(x$tau.s)
mean(x$tau.w)
hist(x$tau.s)
hist(x$tau.w)
exp3
exp(3)
exp(1)
library(Rcpp)
library(optimx)
library(reshape2)
library(ggplot2)
library(patchwork)
sourceCpp("RFunction/Process_S_And_SWAdynamics2.cpp") # Function to simulate process-S and SWA
sourceCpp("RFunction/Process_S_And_SWAdynamics2.cpp") # Function to simulate process-S and SWA
sourceCpp("RFunction/Process_S_And_SWAdynamics2.cpp") # Function to simulate process-S and SWA
sourceCpp("RFunction/Process_S_And_SWAdynamics2.cpp") # Function to simulate process-S and SWA
sourceCpp("RFunction/Process_S_And_SWAdynamics2.cpp") # Function to simulate process-S and SWA
sourceCpp("RFunction/Process_S_And_SWAdynamics2.cpp") # Function to simulate process-S and SWA
SWA_Simulation2()
SWA_Simulation2
SWAsimu<-SWA_Simulation2(NREM = c(1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1),
Wake =  c(0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0),
Rumination = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0),
Time = 1:30,
U = 1.5,L = 0,tau_wake = 8,tau_nrem = 10,tau_rumination = 5,
tau_swa_synchro = 2,tau_swa_desynchro = 1,L_swa = 0,init_ProcessS = 3.5,init_SWA = 0,RuminationDecreasePS = T,
UdiffTime = 0
)
par(mfrow=c(2,1))
plot(SWAsimu$time,SWAsimu$ProcessS[-1],type="l",col="red",ylim=c(-1,5))
lines(SWAsimu$time,SWAsimu$SWAdynamics[-1],col="blue")
plot(SWAsimu$time,SWAsimu$ProcessS[-1] - SWAsimu$SWAdynamics[-1],type="l")
lines((SWAsimu$ProcessS[-1] - SWAsimu$SWAdynamics[-1])[1]*(exp(-(0:5)/2)),col="red",lty=2)
source("RFunction/ModelReinderSWA2.R")
aa<-FitParameters(Deerid = "Ind3",dataReindeer = dataReindeer,RuminationFree = F,RuminationDecreasePS = T)
sourceCpp("RFunction/Process_S_And_SWAdynamics2.cpp") # Function to simulate process-S and SWA
load("../data/dataReindeer_processed.Rdata") # see ProcessData.Rmd
source("RFunction/ModelReinderSWA2.R")
source("RFunction/ModelReinderSWA2.R")
aa<-FitParameters(Deerid = "Ind3",dataReindeer = dataReindeer,RuminationFree = F,RuminationDecreasePS = T)
hist(aa$resids)
plot(aa$fitted$time,aa$fitted$ProcessS[-1])
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(10,15),i = 3)
aa$fits
setwd("F:/Projects/Reindeer/analysis/RFunction")
library(Rcpp)
library(optimx)
library(reshape2)
library(ggplot2)
library(patchwork)
sourceCpp("RFunction/Process_S_And_SWAdynamics2.cpp") # Function to simulate process-S and SWA
load("../data/dataReindeer_processed.Rdata") # see ProcessData.Rmd
source("RFunction/ModelReinderSWA2.R")
SWAsimu<-SWA_Simulation2(NREM = c(1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1),
Wake =  c(0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0),
Rumination = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0),
Time = 1:30,
U = 1.5,L = 0,tau_wake = 8,tau_nrem = 10,tau_rumination = 5,
tau_swa_synchro = 2,tau_swa_desynchro = 1,L_swa = 0,init_ProcessS = 3.5,init_SWA = 0,RuminationDecreasePS = T,
UdiffTime = 0
)
par(mfrow=c(2,1))
plot(SWAsimu$time,SWAsimu$ProcessS[-1],type="l",col="red",ylim=c(-1,5))
lines(SWAsimu$time,SWAsimu$SWAdynamics[-1],col="blue")
plot(SWAsimu$time,SWAsimu$ProcessS[-1] - SWAsimu$SWAdynamics[-1],type="l")
lines((SWAsimu$ProcessS[-1] - SWAsimu$SWAdynamics[-1])[1]*(exp(-(0:5)/2)),col="red",lty=2)
mean(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA[dataReindeer$FullDeltaPow[[x]]$Time>60])[1:300],na.rm=T,prob=1)}))
sd(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA[dataReindeer$FullDeltaPow[[x]]$Time>60])[1:300],na.rm=T,prob=1)}))
# Top value for start
mean(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA)[1:900],prob=1)}))
# Top value for start
mean(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA),prob=0.99)}))
mean(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA),prob=0.9999)}))
sd(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA),na.rm=T,prob=0.9975)}))
source("RFunction/ModelReinderSWA2.R")
aa<-FitParameters(Deerid = "Ind3",dataReindeer = dataReindeer,RuminationFree = F,RuminationDecreasePS = T)
RuminationFree = F
RuminationDecreasePS = T
RUMWN=F
###### Parameter start and limits
paramslim<-GetParametersLimits(RuminationFree=RuminationFree)
params<-paramslim[["init"]]
lower<-paramslim[["lower"]]
upper<-paramslim[["upper"]]
aa$paramslim
paramslim
###### Get df
SWA_SWdf<-Get_SWAdf_SWdf(Deerid,dataReindeer,
RuminationFree=RuminationFree,
RuminationDecreasePS=RuminationDecreasePS,RUMWN=RUMWN)
SWA<-SWA_SWdf[["SWA"]]
Deerid<-3
###### Get df
SWA_SWdf<-Get_SWAdf_SWdf(Deerid,dataReindeer,
RuminationFree=RuminationFree,
RuminationDecreasePS=RuminationDecreasePS,RUMWN=RUMWN)
SWA<-SWA_SWdf[["SWA"]]
SWdf<-SWA_SWdf[["SWdf"]]
###### Get parameters by optimx
fits<-optimx(fn = ObjFun,par = params,method = c("nlminb"),lower=lower,upper=upper, #,"L-BFGS-B","Nelder-Mead"
SWA=SWA,SWdf=SWdf,RuminationFree=RuminationFree,RuminationDecreasePS=RuminationDecreasePS)
fits
warnings()
fits
params["UdiffTime"]
SWAsimu<-SWA_Simulation2(NREM = SWdf$NREM,Wake = SWdf$Wake,
Rumination = SWdf$Rumination,Time = SWdf$Time,
U = (params["U"]),L=(fits[1,"L"]),tau_wake=(fits[1,"tau_wake"]),
tau_nrem = (fits[1,"tau_nrem"]),tau_rumination = tau_rum ,
tau_swa_synchro = (fits[1,"tau_swa_synchro"]),
tau_swa_desynchro = (fits[1,"tau_swa_desynchro"]),
L_swa = (fits[1,"L"]),init_ProcessS = (fits[1,"init_PS"]),
init_SWA = 1,RuminationDecreasePS = RuminationDecreasePS,UdiffTime = fits["UdiffTime"])
# Fitted
if (RuminationFree == T){tau_rum<-(fits[1,"tau_rumination"])}else{tau_rum<-1}
SWAsimu<-SWA_Simulation2(NREM = SWdf$NREM,Wake = SWdf$Wake,
Rumination = SWdf$Rumination,Time = SWdf$Time,
U = (params["U"]),L=(fits[1,"L"]),tau_wake=(fits[1,"tau_wake"]),
tau_nrem = (fits[1,"tau_nrem"]),tau_rumination = tau_rum ,
tau_swa_synchro = (fits[1,"tau_swa_synchro"]),
tau_swa_desynchro = (fits[1,"tau_swa_desynchro"]),
L_swa = (fits[1,"L"]),init_ProcessS = (fits[1,"init_PS"]),
init_SWA = 1,RuminationDecreasePS = RuminationDecreasePS,UdiffTime = fits["UdiffTime"])
SWAsimu<-SWA_Simulation2(NREM = SWdf$NREM,Wake = SWdf$Wake,
Rumination = SWdf$Rumination,Time = SWdf$Time,
U = (params["U"]),L=(fits[1,"L"]),tau_wake=(fits[1,"tau_wake"]),
tau_nrem = (fits[1,"tau_nrem"]),tau_rumination = tau_rum ,
tau_swa_synchro = (fits[1,"tau_swa_synchro"]),
tau_swa_desynchro = (fits[1,"tau_swa_desynchro"]),
L_swa = (fits[1,"L"]),init_ProcessS = (fits[1,"init_PS"]),
init_SWA = 1,RuminationDecreasePS = RuminationDecreasePS,UdiffTime = fits[1,"UdiffTime"])
plot(SWAsimu$SWAdynamics)
SWdf$Time
library(Rcpp)
library(optimx)
library(reshape2)
library(ggplot2)
library(patchwork)
sourceCpp("RFunction/Process_S_And_SWAdynamics2.cpp") # Function to simulate process-S and SWA
load("../data/dataReindeer_processed.Rdata") # see ProcessData.Rmd
source("RFunction/ModelReinderSWA2.R")
SWAsimu<-SWA_Simulation2(NREM = c(1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1),
Wake =  c(0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0),
Rumination = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0),
Time = 1:30,
U = 1.5,L = 0,tau_wake = 8,tau_nrem = 10,tau_rumination = 5,
tau_swa_synchro = 2,tau_swa_desynchro = 1,L_swa = 0,init_ProcessS = 3.5,init_SWA = 0,RuminationDecreasePS = T,
UdiffTime = 0
)
par(mfrow=c(2,1))
plot(SWAsimu$time,SWAsimu$ProcessS[-1],type="l",col="red",ylim=c(-1,5))
lines(SWAsimu$time,SWAsimu$SWAdynamics[-1],col="blue")
plot(SWAsimu$time,SWAsimu$ProcessS[-1] - SWAsimu$SWAdynamics[-1],type="l")
lines((SWAsimu$ProcessS[-1] - SWAsimu$SWAdynamics[-1])[1]*(exp(-(0:5)/2)),col="red",lty=2)
mean(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA[dataReindeer$FullDeltaPow[[x]]$Time>60])[1:300],na.rm=T,prob=1)}))
sd(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA[dataReindeer$FullDeltaPow[[x]]$Time>60])[1:300],na.rm=T,prob=1)}))
# Top value for start
mean(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA)[1:900],prob=1)}))
# Top value for start
mean(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA),prob=0.99)}))
mean(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA),prob=0.9999)}))
sd(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA),na.rm=T,prob=0.9975)}))
source("RFunction/ModelReinderSWA2.R")
aa<-FitParameters(Deerid = "Ind3",dataReindeer = dataReindeer,RuminationFree = F,RuminationDecreasePS = T)
hist(aa$resids)
plot(aa$fitted$time,aa$fitted$ProcessS[-1])
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(10,15),i = 3)
PlotReindeer<-function(fitsReindeer,i= NULL,xlim=NULL){
if (is.null(xlim)){
xlim<-c(20,30)
}
if (is.null(i)){
for (i in 1:length(fitsReindeer)){
SWAsimu<-fitsReindeer[[i]]$fitted
dd<-cbind.data.frame(Time=SWAsimu$time,ProcessS=SWAsimu$ProcessS[-1],SWA=SWAsimu$SWAdynamics[-1])
dd<-melt(dd,measure.vars = c(2,3))
gg1<-ggplot(aes(Time,value,color=variable),data=dd)+geom_path()+theme_classic() +xlim(xlim)
gg2<-ggplot(aes(Time,SWA),data=dataReindeer$FullDeltaPow[[i]])+geom_path()+theme_classic() +xlim(xlim)
gg3<-ggplot(aes(Time,value,color=variable),data=dd[dd$variable == "ProcessS",])+geom_path()+theme_classic() +xlim(xlim)
gg4<-ggplot(aes(Time,value,color=variable),data=dd)+geom_path()+theme_classic() +xlim(xlim)+annotate("path",x=dataReindeer$FullDeltaPow[[i]]$Time,y=dataReindeer$FullDeltaPow[[i]]$SWA,color=alpha("black",0.15)) +scale_y_continuous(trans="log10")
ggf<-gg3/ gg2 / gg4 +  plot_annotation(title = paste("Ind",i,sep="")) #gg1 /
print(ggf)
}
}else{
SWAsimu<-fitsReindeer[[i]]$fitted
dd<-cbind.data.frame(Time=SWAsimu$time,ProcessS=SWAsimu$ProcessS[-1],SWA=SWAsimu$SWAdynamics[-1])
dd<-melt(dd,measure.vars = c(2,3))
gg1<-ggplot(aes(Time,value,color=variable),data=dd)+geom_path()+theme_classic() +xlim(xlim)
gg2<-ggplot(aes(Time,SWA),data=dataReindeer$FullDeltaPow[[i]])+geom_path()+theme_classic() +xlim(xlim)
gg3<-ggplot(aes(Time,value,color=variable),data=dd[dd$variable == "ProcessS",])+geom_path()+theme_classic() +xlim(xlim)
gg4<-ggplot(aes(Time,value,color=variable),data=dd)+geom_path()+theme_classic() +xlim(xlim)+annotate("path",x=dataReindeer$FullDeltaPow[[i]]$Time,y=dataReindeer$FullDeltaPow[[i]]$SWA,color=alpha("black",0.15)) +scale_y_continuous(trans="log10")
ggf<-gg3/ gg2 / gg4 +  plot_annotation(title = paste("Ind",i,sep="")) #gg1 /
print(ggf)
}
}
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(10,15),i = 3)
source("RFunction/ModelReinderSWA2.R")
aa<-FitParameters(Deerid = "Ind3",dataReindeer = dataReindeer,RuminationFree = F,RuminationDecreasePS = T)
hist(aa$resids)
plot(aa$fitted$time,aa$fitted$ProcessS[-1])
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(10,15),i = 3)
plot(aa$resids,pch=".")
aa$fits
source("RFunction/ModelReinderSWA2.R")
aa<-FitParameters(Deerid = "Ind3",dataReindeer = dataReindeer,RuminationFree = F,RuminationDecreasePS = T)
plot(aa$resids,pch=".")
plot(aa$fitted$time,aa$fitted$ProcessS[-1])
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(10,15),i = 3)
source("RFunction/ModelReinderSWA2.R")
aa<-FitParameters(Deerid = "Ind3",dataReindeer = dataReindeer,RuminationFree = F,RuminationDecreasePS = T)
plot(aa$resids,pch=".")
plot(aa$fitted$time,aa$fitted$ProcessS[-1])
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(10,15),i = 3)
hist(aa$resids)
aa$fits
aa$RSS
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(10,15),i = 3)
source("RFunction/ModelReinderSWA2.R")
aa<-FitParameters(Deerid = "Ind3",dataReindeer = dataReindeer,RuminationFree = F,RuminationDecreasePS = T)
plot(aa$resids,pch=".")
hist(aa$resids)
aa$RSS
plot(aa$fitted$time,aa$fitted$ProcessS[-1])
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(10,15),i = 3)
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(40,60),i = 3)
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(0,60),i = 3)
aa$RSS
source("RFunction/ModelReinderSWA2.R")
aa<-FitParameters(Deerid = "Ind3",dataReindeer = dataReindeer,RuminationFree = F,RuminationDecreasePS = T)
source("RFunction/ModelReinderSWA2.R")
aa<-FitParameters(Deerid = "Ind3",dataReindeer = dataReindeer,RuminationFree = F,RuminationDecreasePS = T)
plot(aa$resids,pch=".")
hist(aa$resids)
aa$RSS
plot(aa$fitted$time,aa$fitted$ProcessS[-1])
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(40,60),i = 3)
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(0,60),i = 3)
source("RFunction/ModelReinderSWA2.R")
aa<-FitParameters(Deerid = "Ind3",dataReindeer = dataReindeer,RuminationFree = F,RuminationDecreasePS = T)
plot(aa$resids,pch=".")
hist(aa$resids)
aa$RSS
plot(aa$fitted$time,aa$fitted$ProcessS[-1])
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(40,60),i = 3)
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(0,60),i = 3)
aa$fits
90*0.01
90*0.05
90*0.02
source("RFunction/ModelReinderSWA2.R")
aa<-FitParameters(Deerid = "Ind3",dataReindeer = dataReindeer,RuminationFree = F,RuminationDecreasePS = T)
plot(aa$resids,pch=".")
hist(aa$resids)
aa$RSS
plot(aa$fitted$time,aa$fitted$ProcessS[-1])
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(40,60),i = 3)
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(0,60),i = 3)
aa$fits
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(0,5),i = 3)
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(75,80),i = 3)
source("RFunction/ModelReinderSWA2.R")
aa<-FitParameters(Deerid = "Ind2",dataReindeer = dataReindeer,RuminationFree = F,RuminationDecreasePS = T)
plot(aa$resids,pch=".")
hist(aa$resids)
aa$RSS
plot(aa$fitted$time,aa$fitted$ProcessS[-1])
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(40,60),i = 2)
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(0,60),i = 2)
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(0,5),i = 2)
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(75,80),i = 2)
aa$fits
aa$fitted$time
tail(aa$fitted$time)
source("RFunction/ModelReinderSWA2.R")
aa<-FitParameters(Deerid = "Ind2",dataReindeer = dataReindeer,RuminationFree = F,RuminationDecreasePS = T)
plot(aa$resids,pch=".")
hist(aa$resids)
aa$RSS
plot(aa$fitted$time,aa$fitted$ProcessS[-1])
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(0,91),i = 2)
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(0,5),i = 2)
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(35,40),i = 2)
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(85,91),i = 2)
aa$fits
source("RFunction/ModelReinderSWA2.R")
aa<-FitParameters(Deerid = "Ind2",dataReindeer = dataReindeer,RuminationFree = F,RuminationDecreasePS = T)
plot(aa$resids,pch=".")
hist(aa$resids)
aa$RSS
plot(aa$fitted$time,aa$fitted$ProcessS[-1])
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(0,91),i = 2)
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(0,5),i = 2)
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(35,40),i = 2)
PlotReindeer(list("Ind1"=aa,"Ind2"=aa,"Ind3"=aa),xlim=c(85,91),i = 2)
aa$fits
fitsReindeer_RFf_RDt<-lapply(names(dataReindeer$FullDeltaPow),FitParameters,dataReindeer = dataReindeer,RuminationFree = F,RuminationDecreasePS = T)
fitsReindeer_RFf_RDt_RumWN<-lapply(names(dataReindeerRUMWN$FullDeltaPow),FitParameters,dataReindeer = dataReindeerRUMWN,RuminationFree = F,RuminationDecreasePS = T,RUMWN=T)
par(mfrow=c(1,2))
par(mar=c(2,5,2,2))
# MSE
dd<-cbind.data.frame(sapply(fitsReindeer_RFf_RDt_RumWN,function(x){x$RSS/x$n}),
sapply(fitsReindeer_RFf_RDt,function(x){x$RSS/x$n}))
plot(dd[,1]-dd[,2],pch=19,xlab="Reindeers",ylab="Negative value support\nRumW & RumS",main="diff MSE");abline(a=0,b=0,col="red")
# BIC
dd<-cbind.data.frame(sapply(fitsReindeer_RFf_RDt_RumWN,GetBIC),
sapply(fitsReindeer_RFf_RDt,GetBIC))
plot(dd[,1]-dd[,2],pch=19,xlab="Reindeers",ylab="Negative value support\nRumW & RumS",main="diff BIC");abline(a=0,b=0,col="red")
fitsReindeer_RFt_RDt<-lapply(names(dataReindeer$FullDeltaPow),FitParameters,dataReindeer = dataReindeer,RuminationFree = T,RuminationDecreasePS = T)
fitsReindeer_RFt_RDf<-lapply(names(dataReindeer$FullDeltaPow),FitParameters,dataReindeer = dataReindeer,RuminationFree = T,RuminationDecreasePS = F)
#fitsReindeer_RFf_RDt<-lapply(names(dataReindeer$FullDeltaPow),FitParameters,dataReindeer = dataReindeer,RuminationFree = F,RuminationDecreasePS = T)
fitsReindeer_RFf_RDf<-lapply(names(dataReindeer$FullDeltaPow),FitParameters,dataReindeer = dataReindeer,RuminationFree = F,RuminationDecreasePS = F)
par(mfrow=c(1,2))
par(mar=c(2,5,2,2))
# MSE
dd<-cbind.data.frame(sapply(fitsReindeer_RFf_RDt,function(x){sqrt(x$RSS/x$n)}),
sapply(fitsReindeer_RFf_RDf,function(x){sqrt(x$RSS/x$n)}))
plot(dd[,1]-dd[,2],pch=19,xlab="Reindeers",ylab="Negative value support\nRumination is like sleep",main="diff MSE");abline(a=0,b=0,col="red")
t.test(dd[,1]-dd[,2],alternative = "less")
# BIC
dd<-cbind.data.frame(sapply(fitsReindeer_RFf_RDt,GetBIC),
sapply(fitsReindeer_RFf_RDf,GetBIC))
plot(dd[,1]-dd[,2],pch=19,xlab="Reindeers",ylab="Negative value support\nRumination is like sleep",main="diff BIC");abline(a=0,b=0,col="red")
par(mfrow=c(1,2))
par(mar=c(2,5,2,2))
# MSE
dd<-cbind.data.frame(sapply(fitsReindeer_RFt_RDt,function(x){sqrt(x$RSS/x$n)}),
sapply(fitsReindeer_RFf_RDt,function(x){sqrt(x$RSS/x$n)}))
plot(dd[,1]-dd[,2],pch=19,xlab="Reindeers",ylab="Negative value support\nRumination is free",main="diff MSE");abline(a=0,b=0,col="red")
# BIC
dd<-cbind.data.frame(sapply(fitsReindeer_RFt_RDt,GetBIC),
sapply(fitsReindeer_RFf_RDt,GetBIC))
plot(dd[,1]-dd[,2],pch=19,xlab="Reindeers",ylab="Negative value support\nRumination is free",main="diff BIC");abline(a=0,b=0,col="red")
library(reshape2)
dd<-as.matrix(t(sapply(fitsReindeer_RFt_RDt,function(x){as.numeric(x$fits)})))
colnames(dd)<-names(fitsReindeer_RFt_RDt[[1]]$fits)
dd<-melt(dd)
ggplot(aes(x=Var2,y=value),data=dd)+geom_boxplot()+scale_y_continuous(trans="log10")+theme_classic()+theme(axis.text.x = element_text(angle=45,hjust = 1,vjust = 1))
dd<-as.matrix(t(sapply(fitsReindeer_RFf_RDt,function(x){as.numeric(x$fits)})))
colnames(dd)<-names(fitsReindeer_RFf_RDt[[1]]$fits)
dd<-melt(dd)
ggplot(aes(x=Var2,y=value),data=dd)+geom_boxplot()+scale_y_continuous(trans="log10")+theme_classic()+theme(axis.text.x = element_text(angle=45,hjust = 1,vjust = 1))
library(reshape2)
mm<-read.table("../data/metadata.txt",header=T)
dd<-as.matrix(t(sapply(fitsReindeer_RFt_RDt,function(x){as.numeric(x$fits)})))
colnames(dd)<-names(fitsReindeer_RFt_RDt[[1]]$fits)
dd<-melt(dd)
dd$Ind<-as.factor(mm[dd$Var1,2])
dd$Season<-mm[dd$Var1,3]
ggplot(aes(x=Var2,y=value,color=Season,shape=Ind),data=dd)+geom_point()+scale_y_continuous(trans="log10")+theme_classic()+theme(axis.text.x = element_text(angle=45,hjust = 1,vjust = 1))
for (i in unique(dd$Var2)){
ggp<-ggplot(aes(x=Season,y=value,color=Ind),data=dd[dd$Var2 == i,])+geom_point(size=2)+geom_line(aes(group = Ind),data=dd[dd$Var2 == i,])+theme_classic()+theme(axis.text.x = element_text(angle=45,hjust = 1,vjust = 1))+ggtitle(i)
print(ggp)
}
library(reshape2)
mm<-read.table("../data/metadata.txt",header=T)
dd<-as.matrix(t(sapply(fitsReindeer_RFf_RDt,function(x){as.numeric(x$fits)})))
colnames(dd)<-names(fitsReindeer_RFf_RDt[[1]]$fits)
dd<-melt(dd)
dd$Ind<-as.factor(mm[dd$Var1,2])
dd$Season<-mm[dd$Var1,3]
ggplot(aes(x=Var2,y=value,color=Season,shape=Ind),data=dd)+geom_point()+scale_y_continuous(trans="log10")+theme_classic()+theme(axis.text.x = element_text(angle=45,hjust = 1,vjust = 1))
library(lmerTest)
for (i in unique(dd$Var2)){
ggp<-ggplot(aes(x=Season,y=value,color=Ind),data=dd[dd$Var2 == i,])+geom_point(size=2)+geom_line(aes(group = Ind),data=dd[dd$Var2 == i,])+theme_classic()+theme(axis.text.x = element_text(angle=45,hjust = 1,vjust = 1))+ggtitle(i)
print(ggp)
print(i)
print(anova(lmer(value~Season+(1|Ind),data=dd[dd$Var2 == i,])))
print(summary(aov(value~Season+Error(factor(Ind)),data=dd[dd$Var2 == i,])))
}
library(lmerTest)
for (i in unique(dd$Var2)){
ggp<-ggplot(aes(x=Season,y=value,color=Ind),data=dd[dd$Var2 == i,])+geom_point(size=2)+geom_line(aes(group = Ind),data=dd[dd$Var2 == i,])+theme_classic()+theme(axis.text.x = element_text(angle=45,hjust = 1,vjust = 1))+ggtitle(i)
print(ggp)
print(i)
# print(anova(lmer(value~Season+(1|Ind),data=dd[dd$Var2 == i,])))
# print(summary(aov(value~Season+Error(factor(Ind)),data=dd[dd$Var2 == i,])))
}
library(patchwork)
PlotReindeer<-function(fitsReindeer,i= NULL,xlim=NULL){
if (is.null(xlim)){
xlim<-c(20,30)
}
if (is.null(i)){
for (i in 1:length(fitsReindeer)){
SWAsimu<-fitsReindeer[[i]]$fitted
dd<-cbind.data.frame(Time=SWAsimu$time,ProcessS=SWAsimu$ProcessS[-1],SWA=SWAsimu$SWAdynamics[-1])
dd<-melt(dd,measure.vars = c(2,3))
gg1<-ggplot(aes(Time,value,color=variable),data=dd)+geom_path()+theme_classic() +xlim(xlim)
gg2<-ggplot(aes(Time,SWA),data=dataReindeer$FullDeltaPow[[i]])+geom_path()+theme_classic() +xlim(xlim)
gg3<-ggplot(aes(Time,value,color=variable),data=dd[dd$variable == "ProcessS",])+geom_path()+theme_classic() +xlim(xlim)
gg4<-ggplot(aes(Time,value,color=variable),data=dd)+geom_path()+theme_classic() +xlim(xlim)+annotate("path",x=dataReindeer$FullDeltaPow[[i]]$Time,y=dataReindeer$FullDeltaPow[[i]]$SWA,color=alpha("black",0.15)) +scale_y_continuous(trans="log10")
ggf<-gg3/ gg2 / gg4 +  plot_annotation(title = paste("Ind",i,sep="")) #gg1 /
print(ggf)
}
}else{
SWAsimu<-fitsReindeer[[i]]$fitted
dd<-cbind.data.frame(Time=SWAsimu$time,ProcessS=SWAsimu$ProcessS[-1],SWA=SWAsimu$SWAdynamics[-1])
dd<-melt(dd,measure.vars = c(2,3))
gg1<-ggplot(aes(Time,value,color=variable),data=dd)+geom_path()+theme_classic() +xlim(xlim)
gg2<-ggplot(aes(Time,SWA),data=dataReindeer$FullDeltaPow[[i]])+geom_path()+theme_classic() +xlim(xlim)
gg3<-ggplot(aes(Time,value,color=variable),data=dd[dd$variable == "ProcessS",])+geom_path()+theme_classic() +xlim(xlim)
gg4<-ggplot(aes(Time,value,color=variable),data=dd)+geom_path()+theme_classic() +xlim(xlim)+annotate("path",x=dataReindeer$FullDeltaPow[[i]]$Time,y=dataReindeer$FullDeltaPow[[i]]$SWA,color=alpha("black",0.15)) +scale_y_continuous(trans="log10")
ggf<-gg3/ gg2 / gg4 +  plot_annotation(title = paste("Ind",i,sep="")) #gg1 /
print(ggf)
}
}
PlotReindeer(fitsReindeer_RFf_RDt)
library(patchwork)
PlotReindeer<-function(fitsReindeer,i= NULL,xlim=NULL){
if (is.null(xlim)){
xlim<-c(85,90)
}
if (is.null(i)){
for (i in 1:length(fitsReindeer)){
SWAsimu<-fitsReindeer[[i]]$fitted
dd<-cbind.data.frame(Time=SWAsimu$time,ProcessS=SWAsimu$ProcessS[-1],SWA=SWAsimu$SWAdynamics[-1])
dd<-melt(dd,measure.vars = c(2,3))
gg1<-ggplot(aes(Time,value,color=variable),data=dd)+geom_path()+theme_classic() +xlim(xlim)
gg2<-ggplot(aes(Time,SWA),data=dataReindeer$FullDeltaPow[[i]])+geom_path()+theme_classic() +xlim(xlim)
gg3<-ggplot(aes(Time,value,color=variable),data=dd[dd$variable == "ProcessS",])+geom_path()+theme_classic() +xlim(xlim)
gg4<-ggplot(aes(Time,value,color=variable),data=dd)+geom_path()+theme_classic() +xlim(xlim)+annotate("path",x=dataReindeer$FullDeltaPow[[i]]$Time,y=dataReindeer$FullDeltaPow[[i]]$SWA,color=alpha("black",0.15)) +scale_y_continuous(trans="log10")
ggf<-gg3/ gg2 / gg4 +  plot_annotation(title = paste("Ind",i,sep="")) #gg1 /
print(ggf)
}
}else{
SWAsimu<-fitsReindeer[[i]]$fitted
dd<-cbind.data.frame(Time=SWAsimu$time,ProcessS=SWAsimu$ProcessS[-1],SWA=SWAsimu$SWAdynamics[-1])
dd<-melt(dd,measure.vars = c(2,3))
gg1<-ggplot(aes(Time,value,color=variable),data=dd)+geom_path()+theme_classic() +xlim(xlim)
gg2<-ggplot(aes(Time,SWA),data=dataReindeer$FullDeltaPow[[i]])+geom_path()+theme_classic() +xlim(xlim)
gg3<-ggplot(aes(Time,value,color=variable),data=dd[dd$variable == "ProcessS",])+geom_path()+theme_classic() +xlim(xlim)
gg4<-ggplot(aes(Time,value,color=variable),data=dd)+geom_path()+theme_classic() +xlim(xlim)+annotate("path",x=dataReindeer$FullDeltaPow[[i]]$Time,y=dataReindeer$FullDeltaPow[[i]]$SWA,color=alpha("black",0.15)) +scale_y_continuous(trans="log10")
ggf<-gg3/ gg2 / gg4 +  plot_annotation(title = paste("Ind",i,sep="")) #gg1 /
print(ggf)
}
}
PlotReindeer(fitsReindeer_RFf_RDt)
