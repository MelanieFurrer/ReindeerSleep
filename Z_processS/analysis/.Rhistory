# wilcox.test(dd[,1]-dd[,2],alternative = "less")
# wtd.t.test(dd[,1]-dd[,2],weight = meanRum)
# BIC
dd<-cbind.data.frame(sapply(fitsReindeer_RFf_RDt,GetBIC),
sapply(fitsReindeer_RFf_RDf,GetBIC))
plot(dd[,1]-dd[,2],pch=19,xlab="Reindeers",ylab="Negative value support\nRumination is like sleep",main="diff BIC",col= as.factor(mm$Season),cex=meanRum/5);abline(a=0,b=0,col="red")
wtd.t.test(dd[,1]-dd[,2],weight = meanRum)
# t.test(dd[,1]-dd[,2],alternative = "less")
# wilcox.test(dd[,1]-dd[,2],alternative = "less")
# Install if not available !
library(R.matlab)
library(ggplot2)
source("RFunction/DataProcessing.R")
## Old file given
# dataMat<-readMat("../data/matfiles_swa_std_processS/SWA_STD_all.mat")
# names(dataMat)
# dataMat<-readMat("../data/matfiles_swa_std_processS/SWA_STD_episodes_all.mat")
# names(dataMat)
#
# dataMat2<-readMat("../data/matfiles_swa_std_processS/SWA_STD_episodes_allnew.mat")
# names(dataMat2)
#dataMat<-readMat("../data/matfiles_swa_std_processS/SWA_STD_episodes_all_rumwn.mat")
#dataMat<-readMat("../data/matfiles_swa_std_processS/SWA_STD_episodes_newnormalization.mat")
# More recent !
dataMat<-readMat("../data/matfiles_swa_std_processS/SWA_scoring_episodes_BLnorm.mat")
RumSleepEp<-readMat("../data/matfiles_swa_std_processS/episodes_sleep_rum.mat")
names(dataMat)
# Transform 'wrnwnr' into 'w','r','n'...
Scoring<-apply(dataMat$scoring,1,function(x){
return(strsplit(x,"")[[1]])
})
# Old scoring containing RUMW and RUMN, keep if you want to reuse it !
ScoringRUMWN<-Scoring
# ScoringRUMWN<-apply(dataMat$scoring.rumwn,1,function(x){
#   return(strsplit(x,"")[[1]])
# })
sapply(Scoring,length)
Scorematrix<-Scoring
colnames(Scorematrix)<-paste("Ind",1:ncol(Scorematrix),sep="")
dataMat$SWA.absolute<-t(dataMat$SWA.absolute)
colnames(dataMat$SWA.absolute)<-paste("Ind",1:ncol(Scorematrix),sep="")
dataMat$SWA.normalized<-t(dataMat$SWA.normalized)
colnames(dataMat$SWA.normalized)<-paste("Ind",1:ncol(Scorematrix),sep="")
table(Scorematrix)
ScorematrixRUMWN<-ScoringRUMWN
colnames(ScorematrixRUMWN)<-paste("Ind",1:ncol(ScorematrixRUMWN),sep="")
table(ScorematrixRUMWN)
Mean_SWdf<-ReadReindeerScoring(Scorematrix,nepochs=81900, concattimesec = 3600,concat = "mean")
par(mfcol=c(4,1))
plot(Mean_SWdf$NREM);lines(Mean_SWdf$NREM)
plot(Mean_SWdf$REM);lines(Mean_SWdf$REM)
plot(Mean_SWdf$Wake);lines(Mean_SWdf$Wake)
plot(Mean_SWdf$Rumination);lines(Mean_SWdf$Rumination)
Mean_SWdf_RUMWN<-ReadReindeerScoring(ScorematrixRUMWN,nepochs=81900, concattimesec = 3600,concat = "mean",rumWN = T)
par(mfrow=c(5,1))
plot(Mean_SWdf_RUMWN$NREM);lines(Mean_SWdf_RUMWN$NREM)
plot(Mean_SWdf_RUMWN$REM);lines(Mean_SWdf_RUMWN$REM)
plot(Mean_SWdf_RUMWN$Wake);lines(Mean_SWdf_RUMWN$Wake)
plot(Mean_SWdf_RUMWN$RuminationS);lines(Mean_SWdf_RUMWN$RuminationS)
plot(Mean_SWdf_RUMWN$RuminationW);lines(Mean_SWdf_RUMWN$RuminationW)
tt<-GetMaxSWAperBout(deerid = 1,DoPlot = T)
plot(tt$Time,tt$SWA,type="l")
points(tt$Time,tt$SWA)
tt<-GetMaxSWAperBout(deerid = 8,DoPlot = T)
GetSWA4BoutsOfNREM(SWA=dataMat$SWA.normalized[,3],Scoring=Scorematrix[,3],minboutlength_sec=360,epochlengthsec = 4)
BoutMinThresh<-30
Timeconcat<-4
dataReindeer<-list(SWdf=list(),DeltaPow=list(),Episodes=list(),FullDeltaPow=list())
for (Ind in colnames(Scorematrix)){
dataReindeer[["SWdf"]][[Ind]]<-ReadReindeerScoring(Scorematrix[,Ind,drop=F],nepochs=81900, concattimesec = Timeconcat,concat = "mean")
#dataReindeer[["DeltaPow"]][[Ind]]<-as.data.frame(GetMaxSWAperBout(as.numeric(gsub("Ind","",Ind,))))
#dataReindeer[["DeltaPow"]][[Ind]]<-as.data.frame(GetSWA4BoutsOfNREM(SWA=dataMat$SWA.absolute[,Ind],Scoring=Scorematrix[,Ind],minboutlength_sec=BoutMinThresh,epochlengthsec = 4))
# add time
dataReindeer[["SWdf"]][[Ind]]$Time<-cumsum(rep(Timeconcat,nrow(dataReindeer[["SWdf"]][[Ind]])))/(3600)
dataReindeer[["FullDeltaPow"]][[Ind]]<-cbind.data.frame(SWA=dataMat$SWA.normalized[,Ind],Time=1:nrow(dataMat$SWA.normalized)*4/3600)
dataReindeer[["NREMEpisodes"]][[Ind]]<- dataMat$episodes[,,as.numeric(gsub("Ind","",Ind,))]$nremdura
}
dataReindeerRUMWN<-list(SWdf=list(),DeltaPow=list(),Episodes=list(),FullDeltaPow=list())
for (Ind in colnames(ScorematrixRUMWN)){
dataReindeerRUMWN[["SWdf"]][[Ind]]<-ReadReindeerScoring(ScorematrixRUMWN[,Ind,drop=F],nepochs=81900, concattimesec = Timeconcat,concat = "mean",rumWN = T)
#dataReindeerRUMWN[["DeltaPow"]][[Ind]]<-as.data.frame(GetMaxSWAperBout(as.numeric(gsub("Ind","",Ind,))))
#dataReindeer[["DeltaPow"]][[Ind]]<-as.data.frame(GetSWA4BoutsOfNREM(SWA=dataMat$SWA.absolute[,Ind],Scoring=Scorematrix[,Ind],minboutlength_sec=BoutMinThresh,epochlengthsec = 4))
# add time
dataReindeerRUMWN[["SWdf"]][[Ind]]$Time<-cumsum(rep(Timeconcat,nrow(dataReindeerRUMWN[["SWdf"]][[Ind]])))/(3600)
dataReindeerRUMWN[["FullDeltaPow"]][[Ind]]<-cbind.data.frame(SWA=dataMat$SWA.normalized[,Ind],Time=1:nrow(dataMat$SWA.normalized)*4/3600)
dataReindeerRUMWN[["NREMEpisodes"]][[Ind]]<- dataMat$episodes[,,as.numeric(gsub("Ind","",Ind,))]$nremdura
}
save(dataReindeer,dataReindeerRUMWN,RumSleepEp,file="../data/dataReindeer_processed_BLnorm.Rdata")
library(Rcpp)
library(optimx)
library(reshape2)
library(ggplot2)
library(patchwork)
library(parallel)
library(doSNOW)
library(weights)
NCORES<-2
sourceCpp("RFunction/Process_S_And_SWAdynamics.cpp") # Function to simulate process-S and SWA
load("../data/dataReindeer_processed_BLnorm.Rdata") # see ProcessData.Rmd
source("RFunction/ModelReinderSWA_061022.R")
mm<-read.table("../data/metadata.txt",header=T)
SWAsimu<-SWA_Simulation(NREM = c(1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1),
Wake =  c(0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0),
Rumination = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0),
Time = 1:30,
U = 3.5,L = 0,tau_wake = 8,tau_nrem = 10,tau_rumination = 5,
tau_swa_synchro = 2,tau_swa_desynchro = 1,L_swa = 0,init_ProcessS = 3.5,init_SWA = 0,RuminationDecreasePS = T
)
par(mfrow=c(2,1))
plot(SWAsimu$time,SWAsimu$ProcessS[-1],type="l",col="red",ylim=c(-1,3.5),xlab="Time",ylab="SWA & Process-S")
lines(SWAsimu$time,SWAsimu$SWAdynamics[-1],col="blue")
plot(SWAsimu$time,SWAsimu$ProcessS[-1] - SWAsimu$SWAdynamics[-1],type="l",xlab="Time",ylab="SWA-Process-S")
lines((SWAsimu$ProcessS[-1] - SWAsimu$SWAdynamics[-1])[1]*(exp(-(0:5)/2)),col="red",lty=2)
par(mfcol=c(4,2))
par(mar=c(2,5,2,2))
for (i in seq(1,11)){
Ind<-paste("Ind",i,sep="")
plot(dataReindeer$FullDeltaPow[[Ind]]$Time,dataReindeer$FullDeltaPow[[Ind]]$SWA,type="l",col=rgb(0,0,0,.1),main=Ind,xlab="",ylab="SWA")
# First sleep episode
sleepep<-dataReindeer$NREMEpisodes[[Ind]][dataReindeer$NREMEpisodes[[Ind]][,1] > 100,][1,]
idx<-seq(sleepep[2],sleepep[3])
Time<-dataReindeer$FullDeltaPow[[Ind]]$Time[idx]
SWA<-dataReindeer$FullDeltaPow[[Ind]]$SWA[idx]
plot(Time,SWA,type="l",col=rgb(0,0,0,.8),main="First NREM Episode > 100 epochs",xlab="Time",ylab="SWA")
# Fit exp function
idx_na<- ! is.na(SWA)
Time<-Time[idx_na]
SWA<-SWA[idx_na]
objfun<-function(params){
fitt<-params["C"]+params["A"]*(1-exp(-Time/params["k"]))
return(sum((SWA-fitt)^2))
}
pp<-optimx(objfun,par=c(C=0,A=2,k=10),method = "nlminb")
lines(Time,pp[1,"C"]+pp[1,"A"]*(1-exp(-Time/pp[1,"k"])),col="blue")
maxvalreached<-pp[1,"C"]+pp[1,"A"]*(1-exp(-Time[length(Time)]/pp[1,"k"]))
mtext(side = 3,text=round(maxvalreached,2),padj=1.5)
}
## Mean quantile 99% value for the first hour of NREM
ULIMITS<-mean(sapply(seq(1,11),function(x){quantile(na.omit(dataReindeer$FullDeltaPow[[x]]$SWA[dataReindeer$FullDeltaPow[[x]]$Time<10])[1:900],na.rm=T,prob=0.99)}),na.rm=T)
# Fixed upper asymptote to ULIMITS, used in functions ModelReinderSWA.R
ULIMITS
cl <- makeCluster(NCORES)
clusterExport(cl,c("optimx"))
registerDoSNOW(cl)
# Fit all Reindeer, Rumination not free, decreasing Process-S
fitsReindeer_RFf_RDt <- foreach(i = 1:11,.packages=c("optimx","Rcpp"),.noexport = "SWA_Simulation") %dopar% {
sourceCpp("RFunction/Process_S_And_SWAdynamics.cpp")
res<-FitParameters(names(dataReindeer$FullDeltaPow)[i],dataReindeer = dataReindeer,RuminationFree = F,RuminationDecreasePS = T)
return(res)
}
fitsReindeer_RFf_RDf <- foreach(i = 1:11,.packages=c("optimx","Rcpp"),.noexport = "SWA_Simulation") %dopar% {
sourceCpp("RFunction/Process_S_And_SWAdynamics.cpp")
res<-FitParameters(names(dataReindeer$FullDeltaPow)[i],dataReindeer = dataReindeer,RuminationFree = F,RuminationDecreasePS = F)
return(res)
}
fitsReindeer_RFt_RDt<- foreach(i = 1:11,.packages=c("optimx","Rcpp"),.noexport = "SWA_Simulation") %dopar% {
sourceCpp("RFunction/Process_S_And_SWAdynamics.cpp")
res<-FitParameters(names(dataReindeer$FullDeltaPow)[i],dataReindeer = dataReindeer,RuminationFree = T,RuminationDecreasePS = T)
return(res)
}
fitsReindeer_RFt_RDf <- foreach(i = 1:11,.packages=c("optimx","Rcpp"),.noexport = "SWA_Simulation") %dopar% {
sourceCpp("RFunction/Process_S_And_SWAdynamics.cpp")
res<-FitParameters(names(dataReindeer$FullDeltaPow)[i],dataReindeer = dataReindeer,RuminationFree = T,RuminationDecreasePS = F)
return(res)
}
stopCluster(cl)
par(mfrow=c(1,2))
par(mar=c(2,5,2,2))
meanRum<-sapply(names(dataReindeer$SWdf),function(x){sum(dataReindeer$SWdf[[x]]$Rumination)})
# MSE
dd<-cbind.data.frame(sapply(fitsReindeer_RFf_RDt,function(x){sqrt(x$RSS/x$n)}),
sapply(fitsReindeer_RFf_RDf,function(x){sqrt(x$RSS/x$n)}))
plot(dd[,1]-dd[,2],pch=19,xlab="Reindeers",ylab="Negative value support\nRumination is like sleep",main="diff MSE",col= as.factor(mm$Season),cex=meanRum/5);abline(a=0,b=0,col="red")
# t.test(dd[,1]-dd[,2],alternative = "less")
# wilcox.test(dd[,1]-dd[,2],alternative = "less")
# wtd.t.test(dd[,1]-dd[,2],weight = meanRum)
# BIC
dd<-cbind.data.frame(sapply(fitsReindeer_RFf_RDt,GetBIC),
sapply(fitsReindeer_RFf_RDf,GetBIC))
plot(dd[,1]-dd[,2],pch=19,xlab="Reindeers",ylab="Negative value support\nRumination is like sleep",main="diff BIC",col= as.factor(mm$Season),cex=meanRum/5);abline(a=0,b=0,col="red")
wtd.t.test(dd[,1]-dd[,2],weight = meanRum)
# t.test(dd[,1]-dd[,2],alternative = "less")
# wilcox.test(dd[,1]-dd[,2],alternative = "less")
par(mfrow=c(1,2))
par(mar=c(2,5,2,2))
# MSE
dd<-cbind.data.frame(sapply(fitsReindeer_RFt_RDt,function(x){sqrt(x$RSS/x$n)}),
sapply(fitsReindeer_RFf_RDt,function(x){sqrt(x$RSS/x$n)}))
plot(dd[,1]-dd[,2],pch=19,xlab="Reindeers",ylab="Negative value support\nRumination is free",main="diff MSE",col= as.factor(mm$Season),cex=meanRum/5);abline(a=0,b=0,col="red")
wtd.t.test(dd[,1]-dd[,2],weight = meanRum)
# BIC
dd<-cbind.data.frame(sapply(fitsReindeer_RFt_RDt,GetBIC),
sapply(fitsReindeer_RFf_RDt,GetBIC))
plot(dd[,1]-dd[,2],pch=19,xlab="Reindeers",ylab="Negative value support\nRumination is free",main="diff BIC",col= as.factor(mm$Season),cex=meanRum/5);abline(a=0,b=0,col="red")
wtd.t.test(dd[,1]-dd[,2],weight = meanRum)
dd<-cbind.data.frame(sapply(fitsReindeer_RFt_RDt,GetBIC),
sapply(fitsReindeer_RFf_RDt,GetBIC))
wtd.t.test(dd[,1]-dd[,2],weight = meanRum)
dd<-cbind.data.frame(sapply(fitsReindeer_RFt_RDf,GetBIC),
sapply(fitsReindeer_RFf_RDf,GetBIC))
wtd.t.test(dd[,1]-dd[,2],weight = meanRum)
dd<-cbind.data.frame(sapply(fitsReindeer_RFf_RDt,GetBIC),
sapply(fitsReindeer_RFf_RDf,GetBIC))
wtd.t.test(dd[,1]-dd[,2],weight = meanRum)
dd<-cbind.data.frame(sapply(fitsReindeer_RFt_RDt,GetBIC),
sapply(fitsReindeer_RFt_RDf,GetBIC))
wtd.t.test(dd[,1]-dd[,2],weight = meanRum)
mean(dd[,1])
dd<-cbind.data.frame(sapply(fitsReindeer_RFt_RDf,GetBIC),
sapply(fitsReindeer_RFt_RDt,GetBIC),
sapply(fitsReindeer_RFf_RDf,GetBIC),
sapply(fitsReindeer_RFf_RDt,GetBIC))
mean(dd)
mean(dd[,1])
mean(dd[,1])
mean(dd[,2])
mean(dd[,3])
mean(dd[,4])
dd<-cbind.data.frame(sapply(fitsReindeer_RFt_RDf,GetBIC),
sapply(fitsReindeer_RFt_RDt,GetBIC),
sapply(fitsReindeer_RFf_RDf,GetBIC),
sapply(fitsReindeer_RFf_RDt,GetBIC))
mean(dd[,1])
mean(dd[,2])
mean(dd[,3])
mean(dd[,4])
sd(dd[,1])
sd(dd[,2])
sd(dd[,3])
sd(dd[,4])
dd
min(dd[1,])
find(min(dd[1,]))
library(weights)
setwd("C:/Users/schlaf/Documents/reindeer/Data_Analysis_main_experiment/RDsleepAnalysis/R/Z_processS/analysis")
library(Rcpp)
library(optimx)
library(reshape2)
library(ggplot2)
library(patchwork)
library(parallel)
library(doSNOW)
library(weights)
NCORES<-2
sourceCpp("RFunction/Process_S_And_SWAdynamics.cpp") # Function to simulate process-S and SWA
load("../data/dataReindeer_processed_BLnorm.Rdata") # see ProcessData.Rmd
source("RFunction/ModelReinderSWA_upperfree.R")
mm<-read.table("../data/metadata.txt",header=T)
# Consider first value of Ind1 and Ind11 as NA as we have missing data
dataReindeer$FullDeltaPow$Ind1$SWA[dataReindeer$FullDeltaPow$Ind1$Time<40]<-NA
dataReindeer$SWdf$Ind1$Wake[dataReindeer$SWdf$Ind1$Time<40]<-0
dataReindeer$SWdf$Ind1$Sleep[dataReindeer$SWdf$Ind1$Time<40]<-0
dataReindeer$SWdf$Ind1$NREM[dataReindeer$SWdf$Ind1$Time<40]<-0
dataReindeer$SWdf$Ind1$REM[dataReindeer$SWdf$Ind1$Time<40]<-0
dataReindeer$SWdf$Ind1$Rumination[dataReindeer$SWdf$Ind1$Time<40]<-0
dataReindeer$FullDeltaPow$Ind11$SWA[dataReindeer$FullDeltaPow$Ind11$Time<20]<-NA
dataReindeer$SWdf$Ind11$Wake[dataReindeer$SWdf$Ind11$Time<20]<-0
dataReindeer$SWdf$Ind11$Sleep[dataReindeer$SWdf$Ind11$Time<20]<-0
dataReindeer$SWdf$Ind11$NREM[dataReindeer$SWdf$Ind11$Time<20]<-0
dataReindeer$SWdf$Ind11$REM[dataReindeer$SWdf$Ind11$Time<20]<-0
dataReindeer$SWdf$Ind11$Rumination[dataReindeer$SWdf$Ind11$Time<20]<-0
cl <- makeCluster(NCORES)
clusterExport(cl,c("optimx"))
registerDoSNOW(cl)
# Fit all Reindeer, Rumination not free, decreasing Process-S
fitsReindeer_RFf_RDt <- foreach(i = 1:11,.packages=c("optimx","Rcpp"),.noexport = "SWA_Simulation") %dopar% {
sourceCpp("RFunction/Process_S_And_SWAdynamics.cpp")
res<-FitParameters(names(dataReindeer$FullDeltaPow)[i],dataReindeer = dataReindeer,RuminationFree = F,RuminationDecreasePS = T)
return(res)
}
cl <- makeCluster(NCORES)
clusterExport(cl,c("optimx"))
registerDoSNOW(cl)
# Fit all Reindeer, Rumination not free, decreasing Process-S
fitsReindeer_RFf_RDt <- foreach(i = 1:11,.packages=c("optimx","Rcpp"),.noexport = "SWA_Simulation") %dopar% {
sourceCpp("RFunction/Process_S_And_SWAdynamics.cpp")
res<-FitParameters(names(dataReindeer$FullDeltaPow)[i],dataReindeer = dataReindeer,RuminationFree = F,RuminationDecreasePS = T)
return(res)
}
params<-c(U=5, L=0.1,tau_wake = 10, tau_nrem = 3,tau_rumination = 3,
tau_swa_synchro = tausync,tau_swa_desynchro = taudesync,init_PS=2)
tausync<-(60*5/3600)/3 # @ 5 minutes, difference from process-S is less than 5%
taudesync<-(60*1/3600)/3 # @ 1 minutes, difference from process-S is less than 5%
params<-c(U=5, L=0.1,tau_wake = 10, tau_nrem = 3,tau_rumination = 3,
tau_swa_synchro = tausync,tau_swa_desynchro = taudesync,init_PS=2)
mintausync<-(60*01/3600)/3
maxtausync<-(60*10/3600)/3
maxtaudesync<-(60*10/3600)/3
mintaudesync<-(60*.01/3600)/3
lower<-c(U=5, L=.1,  tau_wake = .5,tau_nrem = .5,tau_rumination = .5,
tau_swa_synchro = mintaudesync,tau_swa_desynchro = mintaudesync,init_PS=0.1)
upper<-c(U=5, L=.1, tau_wake = 30,tau_nrem = 30,tau_rumination = 30,
tau_swa_synchro = 24,tau_swa_desynchro = 24,init_PS=5)
lower<-c(U=3, L=.1,  tau_wake = .5,tau_nrem = .5,tau_rumination = .5,
tau_swa_synchro = mintaudesync,tau_swa_desynchro = mintaudesync,init_PS=0.1)
upper<-c(U=6, L=.1, tau_wake = 30,tau_nrem = 30,tau_rumination = 30,
tau_swa_synchro = 24,tau_swa_desynchro = 24,init_PS=5)
if (RuminationFree == T){
return(list(init=log(params),lower=log(lower),upper=log(upper)))
}else{
idxf<-which(names(params) == "tau_rumination")
return(list(init=log(params[-idxf]),lower=log(lower[-idxf]),upper=log(upper[-idxf])))
}
return(list(init=log(params),lower=log(lower),upper=log(upper)))
setwd("C:/Users/schlaf/Documents/reindeer/Data_Analysis_main_experiment/RDsleepAnalysis/R/Z_processS/analysis")
library(Rcpp)
library(optimx)
library(reshape2)
library(ggplot2)
library(patchwork)
library(parallel)
library(doSNOW)
library(weights)
NCORES<-2
sourceCpp("RFunction/Process_S_And_SWAdynamics.cpp") # Function to simulate process-S and SWA
load("../data/dataReindeer_processed_BLnorm.Rdata") # see ProcessData.Rmd
source("RFunction/ModelReinderSWA_upperfree.R")
mm<-read.table("../data/metadata.txt",header=T)
# Consider first value of Ind1 and Ind11 as NA as we have missing data
dataReindeer$FullDeltaPow$Ind1$SWA[dataReindeer$FullDeltaPow$Ind1$Time<40]<-NA
dataReindeer$SWdf$Ind1$Wake[dataReindeer$SWdf$Ind1$Time<40]<-0
dataReindeer$SWdf$Ind1$Sleep[dataReindeer$SWdf$Ind1$Time<40]<-0
dataReindeer$SWdf$Ind1$NREM[dataReindeer$SWdf$Ind1$Time<40]<-0
dataReindeer$SWdf$Ind1$REM[dataReindeer$SWdf$Ind1$Time<40]<-0
dataReindeer$SWdf$Ind1$Rumination[dataReindeer$SWdf$Ind1$Time<40]<-0
dataReindeer$FullDeltaPow$Ind11$SWA[dataReindeer$FullDeltaPow$Ind11$Time<20]<-NA
dataReindeer$SWdf$Ind11$Wake[dataReindeer$SWdf$Ind11$Time<20]<-0
dataReindeer$SWdf$Ind11$Sleep[dataReindeer$SWdf$Ind11$Time<20]<-0
dataReindeer$SWdf$Ind11$NREM[dataReindeer$SWdf$Ind11$Time<20]<-0
dataReindeer$SWdf$Ind11$REM[dataReindeer$SWdf$Ind11$Time<20]<-0
dataReindeer$SWdf$Ind11$Rumination[dataReindeer$SWdf$Ind11$Time<20]<-0
cl <- makeCluster(NCORES)
clusterExport(cl,c("optimx"))
registerDoSNOW(cl)
# Fit all Reindeer, Rumination not free, decreasing Process-S
fitsReindeer_RFf_RDt <- foreach(i = 1:11,.packages=c("optimx","Rcpp"),.noexport = "SWA_Simulation") %dopar% {
sourceCpp("RFunction/Process_S_And_SWAdynamics.cpp")
res<-FitParameters(names(dataReindeer$FullDeltaPow)[i],dataReindeer = dataReindeer,RuminationFree = F,RuminationDecreasePS = T)
return(res)
}
fitsReindeer_RFf_RDf <- foreach(i = 1:11,.packages=c("optimx","Rcpp"),.noexport = "SWA_Simulation") %dopar% {
sourceCpp("RFunction/Process_S_And_SWAdynamics.cpp")
res<-FitParameters(names(dataReindeer$FullDeltaPow)[i],dataReindeer = dataReindeer,RuminationFree = F,RuminationDecreasePS = F)
return(res)
}
fitsReindeer_RFt_RDt<- foreach(i = 1:11,.packages=c("optimx","Rcpp"),.noexport = "SWA_Simulation") %dopar% {
sourceCpp("RFunction/Process_S_And_SWAdynamics.cpp")
res<-FitParameters(names(dataReindeer$FullDeltaPow)[i],dataReindeer = dataReindeer,RuminationFree = T,RuminationDecreasePS = T)
return(res)
}
fitsReindeer_RFt_RDf <- foreach(i = 1:11,.packages=c("optimx","Rcpp"),.noexport = "SWA_Simulation") %dopar% {
sourceCpp("RFunction/Process_S_And_SWAdynamics.cpp")
res<-FitParameters(names(dataReindeer$FullDeltaPow)[i],dataReindeer = dataReindeer,RuminationFree = T,RuminationDecreasePS = F)
return(res)
}
stopCluster(cl)
par(mfrow=c(1,2))
par(mar=c(2,5,2,2))
meanRum<-sapply(names(dataReindeer$SWdf),function(x){sum(dataReindeer$SWdf[[x]]$Rumination)})
# MSE
dd<-cbind.data.frame(sapply(fitsReindeer_RFf_RDt,function(x){sqrt(x$RSS/x$n)}),
sapply(fitsReindeer_RFf_RDf,function(x){sqrt(x$RSS/x$n)}))
plot(dd[,1]-dd[,2],pch=19,xlab="Reindeers",ylab="Negative value support\nRumination is like sleep",main="diff MSE",col= as.factor(mm$Season),cex=meanRum/5);abline(a=0,b=0,col="red")
# t.test(dd[,1]-dd[,2],alternative = "less")
# wilcox.test(dd[,1]-dd[,2],alternative = "less")
# wtd.t.test(dd[,1]-dd[,2],weight = meanRum)
# BIC
dd<-cbind.data.frame(sapply(fitsReindeer_RFf_RDt,GetBIC),
sapply(fitsReindeer_RFf_RDf,GetBIC))
plot(dd[,1]-dd[,2],pch=19,xlab="Reindeers",ylab="Negative value support\nRumination is like sleep",main="diff BIC",col= as.factor(mm$Season),cex=meanRum/5);abline(a=0,b=0,col="red")
wtd.t.test(dd[,1]-dd[,2],weight = meanRum)
# t.test(dd[,1]-dd[,2],alternative = "less")
# wilcox.test(dd[,1]-dd[,2],alternative = "less")
# BIC rum free
dd<-cbind.data.frame(sapply(fitsReindeer_RFt_RDt,GetBIC),
sapply(fitsReindeer_RFt_RDf,GetBIC))
plot(dd[,1]-dd[,2],pch=19,xlab="Reindeers",ylab="Negative value support\nRumination is like sleep",main="diff BIC",col= as.factor(mm$Season),cex=meanRum/5);abline(a=0,b=0,col="red")
wtd.t.test(dd[,1]-dd[,2],weight = meanRum)
par(mfrow=c(1,2))
par(mar=c(2,5,2,2))
# MSE
dd<-cbind.data.frame(sapply(fitsReindeer_RFt_RDt,function(x){sqrt(x$RSS/x$n)}),
sapply(fitsReindeer_RFf_RDt,function(x){sqrt(x$RSS/x$n)}))
plot(dd[,1]-dd[,2],pch=19,xlab="Reindeers",ylab="Negative value support\nRumination is free",main="diff MSE",col= as.factor(mm$Season),cex=meanRum/5);abline(a=0,b=0,col="red")
#wtd.t.test(dd[,1]-dd[,2],weight = meanRum)
# BIC
dd<-cbind.data.frame(sapply(fitsReindeer_RFt_RDt,GetBIC),
sapply(fitsReindeer_RFf_RDt,GetBIC))
plot(dd[,1]-dd[,2],pch=19,xlab="Reindeers",ylab="Negative value support\nRumination is free",main="diff BIC",col= as.factor(mm$Season),cex=meanRum/5);abline(a=0,b=0,col="red")
wtd.t.test(dd[,1]-dd[,2],weight = meanRum)
library(reshape2)
mm<-read.table("../data/metadata.txt",header=T)
dd<-as.matrix(t(sapply(fitsReindeer_RFf_RDt,function(x){as.numeric(x$fits)})))
colnames(dd)<-names(fitsReindeer_RFf_RDt[[1]]$fits)
dd<-melt(dd)
dd$Ind<-as.factor(mm[dd$Var1,2])
dd$Season<-mm[dd$Var1,3]
ggplot(aes(x=Var2,y=value,color=Season,shape=Ind),data=dd)+geom_point()+scale_y_continuous(trans="log10")+theme_classic()+theme(axis.text.x = element_text(angle=45,hjust = 1,vjust = 1))
library(lmerTest)
for (i in unique(dd$Var2)){
ggp<-ggplot(aes(x=Season,y=value,color=Ind),data=dd[dd$Var2 == i,])+geom_point(size=2)+geom_line(aes(group = Ind),data=dd[dd$Var2 == i,])+theme_classic()+theme(axis.text.x = element_text(angle=45,hjust = 1,vjust = 1))+ggtitle(i)
print(ggp)
if (var(dd[dd$Var2 == i,"value"])>0){
print(i)
print(anova(lmer(value~Season+(1|Ind),data=dd[dd$Var2 == i,])))
print(summary(aov(value~Season+Error(factor(Ind)),data=dd[dd$Var2 == i,])))
}
}
setwd("C:/Users/schlaf/Documents/reindeer/Data_Analysis_main_experiment/RDsleepAnalysis/R/Z_processS/analysis")
library(Rcpp)
library(optimx)
library(reshape2)
library(ggplot2)
library(patchwork)
library(parallel)
library(doSNOW)
library(weights)
NCORES<-2
sourceCpp("RFunction/Process_S_And_SWAdynamics.cpp") # Function to simulate process-S and SWA
load("../data/dataReindeer_processed_BLnorm.Rdata") # see ProcessData.Rmd
source("RFunction/ModelReinderSWA_upperfree.R")
mm<-read.table("../data/metadata.txt",header=T)
# Consider first value of Ind1 and Ind11 as NA as we have missing data
dataReindeer$FullDeltaPow$Ind1$SWA[dataReindeer$FullDeltaPow$Ind1$Time<40]<-NA
dataReindeer$SWdf$Ind1$Wake[dataReindeer$SWdf$Ind1$Time<40]<-0
dataReindeer$SWdf$Ind1$Sleep[dataReindeer$SWdf$Ind1$Time<40]<-0
dataReindeer$SWdf$Ind1$NREM[dataReindeer$SWdf$Ind1$Time<40]<-0
dataReindeer$SWdf$Ind1$REM[dataReindeer$SWdf$Ind1$Time<40]<-0
dataReindeer$SWdf$Ind1$Rumination[dataReindeer$SWdf$Ind1$Time<40]<-0
dataReindeer$FullDeltaPow$Ind11$SWA[dataReindeer$FullDeltaPow$Ind11$Time<20]<-NA
dataReindeer$SWdf$Ind11$Wake[dataReindeer$SWdf$Ind11$Time<20]<-0
dataReindeer$SWdf$Ind11$Sleep[dataReindeer$SWdf$Ind11$Time<20]<-0
dataReindeer$SWdf$Ind11$NREM[dataReindeer$SWdf$Ind11$Time<20]<-0
dataReindeer$SWdf$Ind11$REM[dataReindeer$SWdf$Ind11$Time<20]<-0
dataReindeer$SWdf$Ind11$Rumination[dataReindeer$SWdf$Ind11$Time<20]<-0
cl <- makeCluster(NCORES)
clusterExport(cl,c("optimx"))
registerDoSNOW(cl)
# Fit all Reindeer, Rumination not free, decreasing Process-S
fitsReindeer_RFf_RDt <- foreach(i = 1:11,.packages=c("optimx","Rcpp"),.noexport = "SWA_Simulation") %dopar% {
sourceCpp("RFunction/Process_S_And_SWAdynamics.cpp")
res<-FitParameters(names(dataReindeer$FullDeltaPow)[i],dataReindeer = dataReindeer,RuminationFree = F,RuminationDecreasePS = T)
return(res)
}
fitsReindeer_RFf_RDf <- foreach(i = 1:11,.packages=c("optimx","Rcpp"),.noexport = "SWA_Simulation") %dopar% {
sourceCpp("RFunction/Process_S_And_SWAdynamics.cpp")
res<-FitParameters(names(dataReindeer$FullDeltaPow)[i],dataReindeer = dataReindeer,RuminationFree = F,RuminationDecreasePS = F)
return(res)
}
fitsReindeer_RFt_RDt<- foreach(i = 1:11,.packages=c("optimx","Rcpp"),.noexport = "SWA_Simulation") %dopar% {
sourceCpp("RFunction/Process_S_And_SWAdynamics.cpp")
res<-FitParameters(names(dataReindeer$FullDeltaPow)[i],dataReindeer = dataReindeer,RuminationFree = T,RuminationDecreasePS = T)
return(res)
}
fitsReindeer_RFt_RDf <- foreach(i = 1:11,.packages=c("optimx","Rcpp"),.noexport = "SWA_Simulation") %dopar% {
sourceCpp("RFunction/Process_S_And_SWAdynamics.cpp")
res<-FitParameters(names(dataReindeer$FullDeltaPow)[i],dataReindeer = dataReindeer,RuminationFree = T,RuminationDecreasePS = F)
return(res)
}
stopCluster(cl)
par(mfrow=c(1,2))
par(mar=c(2,5,2,2))
meanRum<-sapply(names(dataReindeer$SWdf),function(x){sum(dataReindeer$SWdf[[x]]$Rumination)})
# MSE
dd<-cbind.data.frame(sapply(fitsReindeer_RFf_RDt,function(x){sqrt(x$RSS/x$n)}),
sapply(fitsReindeer_RFf_RDf,function(x){sqrt(x$RSS/x$n)}))
plot(dd[,1]-dd[,2],pch=19,xlab="Reindeers",ylab="Negative value support\nRumination is like sleep",main="diff MSE",col= as.factor(mm$Season),cex=meanRum/5);abline(a=0,b=0,col="red")
# t.test(dd[,1]-dd[,2],alternative = "less")
# wilcox.test(dd[,1]-dd[,2],alternative = "less")
# wtd.t.test(dd[,1]-dd[,2],weight = meanRum)
# BIC
dd<-cbind.data.frame(sapply(fitsReindeer_RFf_RDt,GetBIC),
sapply(fitsReindeer_RFf_RDf,GetBIC))
plot(dd[,1]-dd[,2],pch=19,xlab="Reindeers",ylab="Negative value support\nRumination is like sleep",main="diff BIC",col= as.factor(mm$Season),cex=meanRum/5);abline(a=0,b=0,col="red")
wtd.t.test(dd[,1]-dd[,2],weight = meanRum)
# t.test(dd[,1]-dd[,2],alternative = "less")
# wilcox.test(dd[,1]-dd[,2],alternative = "less")
# BIC rum free
dd<-cbind.data.frame(sapply(fitsReindeer_RFt_RDt,GetBIC),
sapply(fitsReindeer_RFt_RDf,GetBIC))
plot(dd[,1]-dd[,2],pch=19,xlab="Reindeers",ylab="Negative value support\nRumination is like sleep",main="diff BIC",col= as.factor(mm$Season),cex=meanRum/5);abline(a=0,b=0,col="red")
wtd.t.test(dd[,1]-dd[,2],weight = meanRum)
par(mfrow=c(1,2))
par(mar=c(2,5,2,2))
# MSE
dd<-cbind.data.frame(sapply(fitsReindeer_RFt_RDt,function(x){sqrt(x$RSS/x$n)}),
sapply(fitsReindeer_RFf_RDt,function(x){sqrt(x$RSS/x$n)}))
plot(dd[,1]-dd[,2],pch=19,xlab="Reindeers",ylab="Negative value support\nRumination is free",main="diff MSE",col= as.factor(mm$Season),cex=meanRum/5);abline(a=0,b=0,col="red")
#wtd.t.test(dd[,1]-dd[,2],weight = meanRum)
# BIC
dd<-cbind.data.frame(sapply(fitsReindeer_RFt_RDt,GetBIC),
sapply(fitsReindeer_RFf_RDt,GetBIC))
plot(dd[,1]-dd[,2],pch=19,xlab="Reindeers",ylab="Negative value support\nRumination is free",main="diff BIC",col= as.factor(mm$Season),cex=meanRum/5);abline(a=0,b=0,col="red")
wtd.t.test(dd[,1]-dd[,2],weight = meanRum)
library(reshape2)
mm<-read.table("../data/metadata.txt",header=T)
dd<-as.matrix(t(sapply(fitsReindeer_RFf_RDt,function(x){as.numeric(x$fits)})))
colnames(dd)<-names(fitsReindeer_RFf_RDt[[1]]$fits)
dd<-melt(dd)
dd$Ind<-as.factor(mm[dd$Var1,2])
dd$Season<-mm[dd$Var1,3]
ggplot(aes(x=Var2,y=value,color=Season,shape=Ind),data=dd)+geom_point()+scale_y_continuous(trans="log10")+theme_classic()+theme(axis.text.x = element_text(angle=45,hjust = 1,vjust = 1))
library(lmerTest)
for (i in unique(dd$Var2)){
ggp<-ggplot(aes(x=Season,y=value,color=Ind),data=dd[dd$Var2 == i,])+geom_point(size=2)+geom_line(aes(group = Ind),data=dd[dd$Var2 == i,])+theme_classic()+theme(axis.text.x = element_text(angle=45,hjust = 1,vjust = 1))+ggtitle(i)
print(ggp)
if (var(dd[dd$Var2 == i,"value"])>0){
print(i)
print(anova(lmer(value~Season+(1|Ind),data=dd[dd$Var2 == i,])))
print(summary(aov(value~Season+Error(factor(Ind)),data=dd[dd$Var2 == i,])))
}
}
